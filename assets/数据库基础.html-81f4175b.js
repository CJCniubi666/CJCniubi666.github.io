import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-4cb496de.js";const o="/assets/3ac8ceeabdc5449099104919dffa1963-9403b476.png",t="/assets/39fa675e377949a5b166b884b2f3b608-224c7e9c.png",c="/assets/066a6cfbdd5e4ecba466d0e14e2d29f5-461108f0.png",l="/assets/bb8ccdc0bb48444d894a3fa96effaea4-2f7e39f3.png",p="/assets/2-8010e32f.png",d="/assets/54acd58e1ad344869c00177700f0189b-e62f09cd.png",i="/assets/80ad9127a46f443a8327d22799c3d280-f773187f.png",r="/assets/1-ee4f16da.png",u="/assets/4-94a9ae2c.png",k="/assets/4d968c8cd98045529735bb50f1dd8148-62a0da64.png",b="/assets/3-cccd96ec.png",m={},h=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><table><thead><tr><th>数据库</th><th>存储数据的仓库，数据是有组织的进行存储</th><th>DataBase (DB)</th></tr></thead><tbody><tr><td>数据库管理系统</td><td>操纵和管理数据库的大型软件</td><td>DataBase Management System ( DBMS)</td></tr><tr><td>SQL</td><td>操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</td><td>structured Query Language (sQL)</td></tr></tbody></table><h2 id="什么是数据库" tabindex="-1"><a class="header-anchor" href="#什么是数据库" aria-hidden="true">#</a> 什么是数据库</h2><blockquote><p>数据库（database）是用来<strong>组织</strong>、<strong>存储</strong>和<strong>管理数据</strong>的<strong>仓库</strong>。</p><p>当今世界是一个充满着数据的互联网世界，充斥着大量的数据。数据的来源有很多，比如出行记录、消费记录、浏览的网页、发送的消息等等。除了文本类型的数据，图像、音乐、声音都是数据。</p><p>为了方便管理互联网世界中的数据，就有了<strong>数据库管理系统</strong>的概念（简称：数据库）。用户可以对数据库中的数据进行新增、查询、更新、删除等操作。</p></blockquote><h2 id="数据库的分类" tabindex="-1"><a class="header-anchor" href="#数据库的分类" aria-hidden="true">#</a> 数据库的分类</h2><h3 id="关系型数据库-传统型数据库-或-sql数据库" tabindex="-1"><a class="header-anchor" href="#关系型数据库-传统型数据库-或-sql数据库" aria-hidden="true">#</a> 关系型数据库（传统型数据库 或 SQL数据库）</h3><blockquote><p>MySQL、Oracle、SQL Server 属于<strong>传统型数据库</strong>（又叫做：关系型数据库 或 SQL 数据库），这三者的设计理念相同，用法比较类似。</p><p>1、MySql数据库，默认端口是:3306;</p><p>2、Oracle数据库，默认端口号为: 1521;</p><p>3、Sql Server数据库，默认端口号为:1433;</p><p>4、DB2数据库，默认端口号为:5000;</p><p>5、PostgreSQL数据库，默认端口号为:5432;</p><p>6、国产的DM达梦数据库，默认端口号为:5236。</p></blockquote><h3 id="非关系型数据库-新型数据库-或-nosql数据库" tabindex="-1"><a class="header-anchor" href="#非关系型数据库-新型数据库-或-nosql数据库" aria-hidden="true">#</a> 非关系型数据库（新型数据库 或 NoSQL数据库）</h3><blockquote><p>Nosql 数据库有 redis ， memcache ， MongoDb等等。</p><p>1.Redis数据库，默认端口号:6379;</p><p>2.Memcached数据库，默认端口号:11211 ;</p><p>3.MongoDB数据库，默认端口号:27017;</p></blockquote><h2 id="常见的数据库" tabindex="-1"><a class="header-anchor" href="#常见的数据库" aria-hidden="true">#</a> 常见的数据库</h2><h3 id="mysql-3306" tabindex="-1"><a class="header-anchor" href="#mysql-3306" aria-hidden="true">#</a> MySQL 3306</h3><blockquote><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，属于Oracle旗下产品。</p><p>MySQL是最流行的关系型数据库管理系统之一，在 WEB应用方面，MySQL是最好的 RDBMS &gt; （RelationalDatabase Management System，关系数据库管理系统）应用软件之一。</p><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL5.0增加了inforation_schema系统数据库MySQL 。</p><p>（可以通过查看是否有该表判断数据库版本是否大于5.0）</p></blockquote><h3 id="sql-server-1433" tabindex="-1"><a class="header-anchor" href="#sql-server-1433" aria-hidden="true">#</a> SQL Server 1433</h3><blockquote><p>SQL Server是Microsoft公司推出的关系型数据库管理系统。</p><p>具有使用方便可伸缩性好与相关软件集成程度高等优点，可跨越从运行Micrcsoft Windows 98的膝上型电脑到运行Microsoft</p><p>Windows 2012的大型多处理器的服务器等多种平台使用。Microsoft SQL Server是一个全面的数据库平台，使用集成的商业智能(BI)工具提供了企业级的数据管理。</p><p>Microsoft SQLServer数据库引擎为关系型数据和结构化数据提供了更安全可靠的存储功能，使您可以构建和管理用于业务的高可用和高性能的数据应用程序。</p></blockquote><h3 id="oracle-1521" tabindex="-1"><a class="header-anchor" href="#oracle-1521" aria-hidden="true">#</a> Oracle 1521</h3><blockquote><p>Oracle是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是世界上流行的关系数据库管理系统，系统可移植性好、使用方便、功能强，适用于各类大、中、小微机环境。它是一种高效率的、可靠性好的、适应高吞吐量的数据库方案。</p><ul><li>可用性强</li><li>可扩展性强</li><li>数据安全性</li><li>强稳定性强</li></ul></blockquote><h2 id="数据库基础命令" tabindex="-1"><a class="header-anchor" href="#数据库基础命令" aria-hidden="true">#</a> 数据库基础命令</h2><h3 id="进入数据库" tabindex="-1"><a class="header-anchor" href="#进入数据库" aria-hidden="true">#</a> 进入数据库</h3><blockquote><p><code>mysql -h 127.0.0.1 -u root -p;</code></p><p>接着输入密码</p></blockquote><h3 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h3><blockquote><p><code>create database database_name;</code></p></blockquote><h3 id="展示数据库" tabindex="-1"><a class="header-anchor" href="#展示数据库" aria-hidden="true">#</a> 展示数据库</h3><blockquote><p><code>show databases;</code></p></blockquote><h3 id="选择数据库" tabindex="-1"><a class="header-anchor" href="#选择数据库" aria-hidden="true">#</a> 选择数据库</h3><blockquote><p><code>use 数据库名;</code></p></blockquote><h3 id="展示表内容" tabindex="-1"><a class="header-anchor" href="#展示表内容" aria-hidden="true">#</a> 展示表内容</h3><blockquote><p><code>show tables;</code></p></blockquote><h3 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> school <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    student_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    age <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><p><code>id</code> 是主键，使用 <code>INT</code> 数据类型，并使用 <code>AUTO_INCREMENT</code> 关键字使其自动增长，确保每条记录都有唯一的标识符，<code>PRIMARY KEY</code>表示主键。</p></li><li><p><code>username</code> 是一个 <code>VARCHAR(50)</code> 类型的列，<code>NOT NULL</code> 约束确保此列不为空。</p></li><li><p><code>email</code> 是一个 <code>VARCHAR(100)</code> 类型的列，并使用 <code>UNIQUE</code> 约束确保邮箱地址是唯一的。</p></li><li><p><code>age</code> 是一个 <code>INT</code> 类型的列，可以为空（即没有 <code>NOT NULL</code> 约束）。</p></li></ul></blockquote><h3 id="插入数据语句" tabindex="-1"><a class="header-anchor" href="#插入数据语句" aria-hidden="true">#</a> 插入数据语句</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age<span class="token punctuation">)</span> 

<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;john_doe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;john@example.com&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入表属性" tabindex="-1"><a class="header-anchor" href="#插入表属性" aria-hidden="true">#</a> 插入表属性</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name

<span class="token keyword">add</span> colume_name data_type <span class="token punctuation">[</span>constraints<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其中，<code>table_name</code> 是目标表的名称，<code>column_name</code> 是要添加的新属性（列）的名称，<code>data_type</code> 是新属性的数据类型，<code>constraints</code> 是新属性的约束（可选）。</p></blockquote><h3 id="更新表属性的值" tabindex="-1"><a class="header-anchor" href="#更新表属性的值" aria-hidden="true">#</a> 更新表属性的值</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name 

<span class="token keyword">SET</span> column_name <span class="token operator">=</span> new_value 

<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其中，<code>table_name</code> 是目标表的名称，<code>column_name</code> 是要更新数据的列名，<code>new_value</code> 是要设置的新值，<code>condition</code> 是确定要更新哪些记录的条件。</p></blockquote><h3 id="展示表的属性" tabindex="-1"><a class="header-anchor" href="#展示表的属性" aria-hidden="true">#</a> 展示表的属性</h3><blockquote><p><code>show columns from table_name;</code> 或者 <code>desc table_name;</code></p></blockquote><h3 id="查询语句" tabindex="-1"><a class="header-anchor" href="#查询语句" aria-hidden="true">#</a> 查询语句</h3><blockquote><p><code>select id,emali from table_name;</code></p><p>如果要查询所有，就输入<code>select * from table_name;</code></p><p>然后可以再后面接许多子句，例如：</p></blockquote><ol><li><strong>SELECT 子句</strong>：用于指定要返回的列，以及可以使用表达式进行计算和重命名列。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="2"><li><strong>where 子句</strong>：用于筛选满足指定条件的记录。可以使用比较运算符、逻辑运算符和通配符等来构建条件。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
      
例如：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> class<span class="token operator">=</span><span class="token string">&quot;一班&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="3"><li><strong>order by 子句</strong>：用于按照指定的列对结果进行排序，可以选择**升序（ASC，默认）<strong>或</strong>降序（DESC）**排序。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1 <span class="token keyword">ASC</span><span class="token punctuation">;</span>
      
column1表示列名
例如：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="4"><li><strong>group by 子句</strong>：用于将结果按照指定的列进行分组，并对每个组进行聚合操作，如计算 SUM、COUNT、AVG 等。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column2<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1<span class="token punctuation">;</span>
      
column1表示列名
例如：<span class="token keyword">select</span> class<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> school <span class="token keyword">group</span> <span class="token keyword">by</span> class<span class="token punctuation">;</span>
按照class班级进行分组，查询每个班的平均年纪
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="5"><li><strong>having 子句</strong>：用于对 GROUP BY 后的结果进行过滤，只返回满足特定条件的组。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column2<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column1
<span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>column2<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">;</span>
      
<span class="token keyword">select</span> class<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> school <span class="token keyword">group</span> <span class="token keyword">by</span> class <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>
查询平均年龄<span class="token number">50</span>以下的每个班的平均年龄
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="6"><li><strong>limit 子句</strong>：用于限制查询结果的返回数量。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table_name
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
   
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> school <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>
限制返回从第一条之后的<span class="token number">5</span>条数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ol start="7"><li><strong>join 子句</strong>：用于连接多个表，以便在查询中使用来自不同表的数据。</li></ol><blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">ON</span> table1<span class="token punctuation">.</span><span class="token keyword">column</span> <span class="token operator">=</span> table2<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">;</span>
	   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>INNER JOIN</code>返回满足连接条件的数据</p></li><li><p><code>LEFT JOIN</code> 返回左表中的所有数据和右表中匹配的数据</p></li><li><p><code>RIGHT JOIN</code> 返回右表中的所有数据和左表中匹配的数据</p></li><li><p><code>FULL JOIN</code> 返回左表和右表中的所有数据，并将匹配数据联接在一起</p></li></ul></blockquote><h3 id="删除语句" tabindex="-1"><a class="header-anchor" href="#删除语句" aria-hidden="true">#</a> 删除语句</h3><p><strong>1.delete</strong></p><blockquote><p><code>DELETE</code> 语句用于删除表中的记录（行）。如果您只想<strong>删除部分数据而不是整个表</strong>，可以使用 <code>DELETE</code> 语句。</p><p>以下是 <code>DELETE</code> 语句的一般语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>table_name</code> 是要删除记录的目标表的名称，<code>condition</code> 是用于指定要删除哪些记录的条件。</p></blockquote><p><strong>2.drop</strong></p><blockquote><p><code>DROP</code> 语句用于删除整个表及其结构。如果您想<strong>完全删除一个表</strong>，包括表结构和所有数&gt; 据，可以使用 <code>DROP</code> 语句。</p><p>以下是 <code>DROP</code> 语句的一般语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>table_name</code> 是要删除的目标表的名称。</p></blockquote><h2 id="数据库重要名" tabindex="-1"><a class="header-anchor" href="#数据库重要名" aria-hidden="true">#</a> 数据库重要名</h2><h3 id="重要数据库information-schema" tabindex="-1"><a class="header-anchor" href="#重要数据库information-schema" aria-hidden="true">#</a> 重要数据库<code>information_schema</code></h3><blockquote><p>information_schema下有几个重要的表</p><p>存储<strong>数据库名</strong>：<strong>SCHEMATA</strong></p><p>存储数据库名及其下的所有<strong>表名</strong>：<strong>TABLES</strong></p><p>存储数据库名及其下所有表并且表下的所有<strong>字段名</strong>：<strong>COLUMNS</strong></p><p><strong>SCHEMATA</strong>下的重要字段：<strong>schema_name</strong>(数据库名)</p><p><strong>TABLES</strong>下的重要字段：<strong>table_schema</strong>(表所属的数据库名)，<strong>table_name</strong>(表名)</p><p><strong>COLUMNS</strong>下的重要字段：<strong>table_schema</strong>(字段所属数据库的名字)，<strong>table_name</strong>(字段所属表的名字)，<strong>column_name</strong>（字段名）</p></blockquote><h3 id="mysql数据库函数" tabindex="-1"><a class="header-anchor" href="#mysql数据库函数" aria-hidden="true">#</a> mysql数据库函数</h3><h4 id="基础函数" tabindex="-1"><a class="header-anchor" href="#基础函数" aria-hidden="true">#</a> 基础函数</h4><blockquote><p>MySQL数据库版本：<code>version()</code> || <code>@@version</code></p><p>数据库用户名：<code>user()</code></p><p>数据库库名：<code>database()</code></p><p>数据库安装路径：<code>@@basedir</code></p><p>数据库文件存放路径：<code>@@datadir</code></p><p>操作系统版本：<code>@@version_compile_os</code></p></blockquote><h4 id="union联合注入函数" tabindex="-1"><a class="header-anchor" href="#union联合注入函数" aria-hidden="true">#</a> union联合注入函数</h4><p><strong>concat()：</strong></p><blockquote><p>语法：concat(str1,str2,…)</p><p>拼接字符串，直接拼接，字符之间没有符号</p><p><img src="`+o+'" alt="在这里插入图片描述"></p></blockquote><p><strong>concat_ws()</strong>：</p><blockquote><p>语法：concat_ws(‘separator’, str1, str2, …)</p><p>指定符号进行拼接</p><p><img src="'+t+'" alt="在这里插入图片描述"></p></blockquote><p><strong>group_concat()</strong>：</p><blockquote><p>语法：group_concat(username)</p><p>将username中的内容以逗号隔开显示出来</p><p><img src="'+c+'" alt="在这里插入图片描述"></p></blockquote><h4 id="sql盲注函数" tabindex="-1"><a class="header-anchor" href="#sql盲注函数" aria-hidden="true">#</a> sql盲注函数</h4><h5 id="布尔盲注函数" tabindex="-1"><a class="header-anchor" href="#布尔盲注函数" aria-hidden="true">#</a> 布尔盲注函数</h5><p><strong>函数length()</strong>：</p><blockquote><p>返回指定对象的长度 length(database())返回当前数据库名的长度</p><p><img src="'+l+'" alt="在这里插入图片描述"></p></blockquote><p><strong>函数left()与函数right()</strong>：</p><blockquote><p>left(str,num)：对字符串str从左开始数起，返回num个字符（与函数right()相反）</p><p><img src="'+p+'" alt="2"></p></blockquote><p><strong>函数substr()</strong>：</p><blockquote><p>substr()和substring()函数实现的功能是一样的，均为截取字符串。 substr(database(),1,1),查看数据库名第一位，substr(database(),2,1)查看数据库名第二位，依次查看各位字符。</p></blockquote><blockquote><p>substr(database(),1,3) 当前数据库名为security，从第1位开始，截取3位</p><p><img src="'+d+'" alt="在这里插入图片描述"></p></blockquote><blockquote><p>substr(database(),4,1) 当前数据库名，从第4位开始，截取1位</p><p><img src="'+i+'" alt="在这里插入图片描述"></p></blockquote><p><strong>函数mid()</strong>：</p><blockquote><p>与substr()函数用法相同</p><p><img src="'+r+'" alt="1"></p></blockquote><p><strong>函数ascii()</strong>：</p><blockquote><p>返回字符串str的最左字符的数值，ASCII()返回数值是从0到255</p><p><img src="'+u+'" alt="4"></p><p><img src="'+k+'" alt="在这里插入图片描述"></p></blockquote><p><strong>函数ord()</strong>：</p><blockquote><p>与函数ascii()相同，返回字符串第一个字符的 ASCII 值。</p><p><img src="'+b+'" alt="3"></p></blockquote>',90),g=[h];function v(q,y){return n(),a("div",null,g)}const f=s(m,[["render",v],["__file","数据库基础.html.vue"]]);export{f as default};
