import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,e as r}from"./app-d99091c8.js";const o={},t=r('<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p><strong>目录穿越</strong>（Directory Traversal）是一种常见的安全漏洞，它存在于<strong>许多网络应用程序</strong>中。这种漏洞允许攻击者访问系统中<strong>未经授权的文件或目录</strong>，甚至可能<strong>允许攻击者执行恶意代码</strong>。</p><p>该漏洞通常发生在服务器端，当应用程序未能正确验证用户提供的文件路径或目录名时，攻击者可以在路径中使用特殊字符或序列来跳出当前目录，访问系统中的其他目录或文件。攻击者利用这个漏洞可以获取敏感信息、篡改或删除文件，甚至在某些情况下执行远程代码。</p><p>例如，在Web应用程序中，当用户在URL中输入文件名或路径时，应用程序可能会在服务器端使用这些输入来访问文件并返回给用户。如果应用程序没有对输入进行恰当的验证和过滤，攻击者可以通过在输入中添加&quot;../&quot;或其他特殊字符来绕过应用程序的目录限制，进而访问系统上的其他目录或文件。</p><p>以下是一个简单的示例，假设Web应用程序允许用户通过URL下载文件：</p><p>正常请求：http 😕/example.com/download?file=documents/report.pdf</p><p>攻击者可以通过以下方式进行目录穿越攻击：</p><p>恶意请求：http 😕/example.com/download?file=../../../../../etc/passwd</p><p>在上面的例子中，攻击者使用&quot;../&quot;来逐级返回目录，最终访问了系统的/etc/passwd文件，这是一个包含用户账户信息的敏感文件。</p><p>要防止目录穿越漏洞，开发者应该对所有输入进行严格的验证和过滤，并在访问文件系统资源之前，将输入路径转换为绝对路径。最好的方式是使用白名单验证，仅允许特定的目录或文件访问，而不是仅仅过滤&quot;../&quot;等字符。</p><p>总之，目录穿越漏洞是一种常见的安全问题，开发者和系统管理员应该意识到它的存在，并采取适当的措施来防止它的发生。</p><h2 id="相对路径" tabindex="-1"><a class="header-anchor" href="#相对路径" aria-hidden="true">#</a> 相对路径</h2><p><code>../../../etc/passwd</code></p><h2 id="绝对路径" tabindex="-1"><a class="header-anchor" href="#绝对路径" aria-hidden="true">#</a> 绝对路径</h2><p><code>/etc/passwd</code></p><h2 id="双写-绕过" tabindex="-1"><a class="header-anchor" href="#双写-绕过" aria-hidden="true">#</a> 双写../绕过</h2><p><code>....//....//....//etc/passwd</code></p><h2 id="url编码绕过" tabindex="-1"><a class="header-anchor" href="#url编码绕过" aria-hidden="true">#</a> URL编码绕过</h2><p><code>../</code></p><p>第一次：<code>%2e%2e%2f</code></p><p>第二次：<code>%252e%252e%252f</code></p><p><code>..%252f..%252f..%252fetc/passwd</code></p><h2 id="绝对路径配合-绕过" tabindex="-1"><a class="header-anchor" href="#绝对路径配合-绕过" aria-hidden="true">#</a> 绝对路径配合../绕过</h2><p><code>../../../etc/passwd</code></p><h2 id="_00截断文件后缀绕过" tabindex="-1"><a class="header-anchor" href="#_00截断文件后缀绕过" aria-hidden="true">#</a> %00截断文件后缀绕过</h2><p><code>../../../etc/passwd%00.png</code></p><h2 id="防御" tabindex="-1"><a class="header-anchor" href="#防御" aria-hidden="true">#</a> 防御</h2><p>防范的方法 要防范目录穿越与远程文件调用攻击，可以使用下列方法： (1）不要使用使用者提供的文件名 (2）检查使用者输入的文件名中是否有&quot;..&quot;的目录级层的字符 (3) php.ini 文件中设置 open_basedir 来指定可以打开文件的目录 (4) php.ini 文件中设置 allow_url_fopen 为 Off ，来让 Web 应用程序不能打开远程文件 (5) realpath 与 basename 函数来处理使用者输入的文件名</p>',28),p=[t];function c(h,s){return a(),d("div",null,p)}const l=e(o,[["render",c],["__file","目录穿越.html.vue"]]);export{l as default};
